"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _eyesWebdriverio = require("@applitools/eyes-webdriverio");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const log = (0, _logger.default)('@wdio/applitools-service');
const DEFAULT_VIEWPORT = {
  width: 1440,
  height: 900
};

class ApplitoolsService {
  constructor(options) {
    this.options = options;
    this.eyes = new _eyesWebdriverio.Eyes();
  }

  beforeSession() {
    const key = this.options.key || process.env.APPLITOOLS_KEY;
    const serverUrl = this.options.serverUrl || process.env.APPLITOOLS_SERVER_URL;

    if (!key) {
      throw new Error('Couldn\'t find an Applitools "applitools.key" in config nor "APPLITOOLS_KEY" in the environment');
    }

    if (serverUrl) {
      this.eyes.setServerUrl(serverUrl);
    }

    this.isConfigured = true;
    this.eyes.setApiKey(key);

    if (this.options.proxy) {
      this.eyes.setProxy(this.options.proxy);
    }

    this.viewport = Object.assign(_objectSpread({}, DEFAULT_VIEWPORT), this.options.viewport);
  }

  before() {
    if (!this.isConfigured) {
      return;
    }

    global.browser.addCommand('takeSnapshot', title => {
      if (!title) {
        throw new Error('A title for the Applitools snapshot is missing');
      }

      return this.eyes.check(title, _eyesWebdriverio.Target.window());
    });
    global.browser.addCommand('takeRegionSnapshot', (title, region, frame) => {
      if (!title) {
        throw new Error('A title for the Applitools snapshot is missing');
      }

      if (!region || region === null) {
        throw new Error('A region for the Applitools snapshot is missing');
      }

      if (!frame) {
        return this.eyes.check(title, _eyesWebdriverio.Target.region(region));
      }

      return this.eyes.check(title, _eyesWebdriverio.Target.region(region, frame));
    });
  }

  beforeTest(test) {
    if (!this.isConfigured) {
      return;
    }

    log.info(`Open eyes for ${test.parent} ${test.title}`);
    global.browser.call(() => this.eyes.open(global.browser, test.title, test.parent, this.viewport));
  }

  afterTest() {
    var _context;

    if (!this.isConfigured) {
      return;
    }

    global.browser.call((_context = this.eyes).close.bind(_context));
  }

  after() {
    var _context2;

    if (!this.isConfigured) {
      return;
    }

    global.browser.call((_context2 = this.eyes).abortIfNotClosed.bind(_context2));
  }

}

exports.default = ApplitoolsService;